<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

<!--
     Provide ONAP VES Testcollector as docker image
     git: https://github.com/onap/demo/tree/master/vnfs/VES5.0/evel/evel-test-collector
     python:2.7-alpine
 -->

  <parent>
    <groupId>org.onap.ccsdk.parent</groupId>
    <artifactId>odlparent-lite</artifactId>
    <version>1.3.2</version>
    <relativePath />
  </parent>

  <groupId>org.onap.ccsdk.distribution</groupId>
  <artifactId>ves-testcollector</artifactId>
  <version>0.5.1-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>VES Test Collector</name>
  <description>Creates Ubuntu based container</description>
  <organization>
    <name>openECOMP</name>
  </organization>

  <properties>
    <docker.app.name>vescollector</docker.app.name>
    <base.image.repo>python:2.7-alpine</base.image.repo>
    <image.name>ves-testcollector</image.name>
    <ccsdk.project.version>${project.version}</ccsdk.project.version>
    <ccsdk.build.timestamp>${maven.build.timestamp}</ccsdk.build.timestamp>
    <ccsdk.features.version>${project.version}</ccsdk.features.version>
    <maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>
    <opendaylight.root>opt/opendaylight</opendaylight.root>
    <docker.push.phase>deploy</docker.push.phase>
    <docker.verbose>true</docker.verbose>
    <ansible.gpg.key>93C4A3FD7BB9C367</ansible.gpg.key>
  </properties>

  <scm>
	 <connection>scm:git:git://github.com/onap/demo.git</connection>
	 <developerConnection>scm:git:https://github.com/onap/demo.git</developerConnection>
	 <url>https://github.com/onap/demo.git</url>
  </scm>

  <dependencies>
  </dependencies>
  <build>
    <extensions>
      <extension>
            <!-- this extension is required by wagon in order to pass the proxy -->
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-http-lightweight</artifactId>
        <version>2.2</version>
      </extension>
    </extensions>
    <plugins>
      <plugin>
        <groupId>org.codehaus.groovy.maven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <source>${basedir}/src/main/scripts/TagVersion.groovy</source>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <execution>
            <id>copy-dockerfile</id>
            <goals>
              <goal>copy-resources</goal>
            </goals><!-- here the phase you need -->
            <phase>validate</phase>
            <configuration>
              <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/docker</directory>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-scripts</id>
            <goals>
              <goal>copy-resources</goal>
            </goals><!-- here the phase you need -->
            <phase>validate</phase>
            <configuration>
              <outputDirectory>${basedir}/target/docker-stage/bin</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/scripts</directory>
                  <includes>
                    <include>*.sh</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack features</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
              <excludeTransitive>true</excludeTransitive>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
            </configuration>
          </execution>
        </executions>
      </plugin>
	<plugin>
		<groupId>org.codehaus.mojo</groupId>
		<artifactId>exec-maven-plugin</artifactId>
		<executions>
			<execution>
				<id>clone repository</id>
				<phase>process-sources</phase>
				<goals>
					<goal>exec</goal>
				</goals>
				<configuration>
					<executable>git</executable>
					<arguments>
						<argument>clone</argument>
						<argument>https://github.com/onap/demo.git</argument>
						<argument>${basedir}/target/docker-stage/ves</argument>
					</arguments>
				</configuration>
			</execution>
		</executions>
	</plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.16.5</version>
            <inherited>false</inherited>
            <configuration>
              <images>
                <image>
                  <name>${image.name}</name>
                  <build>
                    <cleanup>try</cleanup>
                    <dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
                    <dockerFile>${basedir}/target/docker-stage/Dockerfile</dockerFile>
                    <tags>
                      <tag>${project.docker.latestminortag.version}</tag>
                      <tag>${project.docker.latestfulltag.version}</tag>
                      <tag>${project.docker.latesttagtimestamp.version}</tag>
                    </tags>
                  </build>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>generate-images</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>

              <execution>
                <id>push-images</id>
                <phase>${docker.push.phase}</phase>
                <goals>
                  <goal>build</goal>
                  <goal>push</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
    </plugins>
  </build>
 </project>
